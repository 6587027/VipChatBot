// components/Chat/ChatInterface.tsx
import React, { useState, useEffect, useRef } from 'react';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant' | 'system';
  timestamp: Date;
  isStreaming?: boolean;
}

interface ChatInterfaceProps {
  chatId: string | null;
  className?: string;
}

export const ChatInterface: React.FC<ChatInterfaceProps> = ({
  chatId,
  className = ''
}) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Load chat messages when chatId changes
  useEffect(() => {
    if (chatId) {
      loadChatMessages(chatId);
    } else {
      setMessages([]);
    }
  }, [chatId]);

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [inputValue]);

  const loadChatMessages = async (id: string) => {
    setIsLoading(true);
    try {
      // TODO: Replace with actual API call
      // const response = await fetch(`/api/chats/${id}/messages`);
      // const chatMessages = await response.json();
      
      // For now, load from localStorage
      const saved = localStorage.getItem(`zenith_chat_${id}`);
      if (saved) {
        const parsed = JSON.parse(saved);
        setMessages(parsed.map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        })));
      }
    } catch (error) {
      console.error('Failed to load messages:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const sendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      content: inputValue.trim(),
      role: 'user',
      timestamp: new Date()
    };

    const newMessages = [...messages, userMessage];
    setMessages(newMessages);
    setInputValue('');
    setIsLoading(true);
    setIsStreaming(true);

    try {
      // TODO: Replace with actual API call
      // const response = await fetch('/api/chat', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({
      //     messages: newMessages.map(msg => ({ role: msg.role, content: msg.content })),
      //     stream: true
      //   })
      // });

      // For now, simulate AI response
      await new Promise(resolve => setTimeout(resolve, 1000));

      const aiMessage: Message = {
        id: `msg-ai-${Date.now()}`,
        content: generateAIResponse(userMessage.content),
        role: 'assistant',
        timestamp: new Date()
      };

      const finalMessages = [...newMessages, aiMessage];
      setMessages(finalMessages);

      // Save to localStorage (replace with API call)
      if (chatId) {
        localStorage.setItem(`zenith_chat_${chatId}`, JSON.stringify(finalMessages));
      } else {
        // Create new chat
        const newChatId = `chat-${Date.now()}`;
        const chatTitle = userMessage.content.substring(0, 50);
        
        // Save chat to history
        const history = JSON.parse(localStorage.getItem('zenith_chat_history') || '[]');
        history.unshift({
          id: newChatId,
          title: chatTitle,
          preview: userMessage.content,
          timestamp: new Date(),
          unread: false
        });
        localStorage.setItem('zenith_chat_history', JSON.stringify(history));
        localStorage.setItem(`zenith_chat_${newChatId}`, JSON.stringify(finalMessages));
      }

    } catch (error) {
      console.error('Failed to send message:', error);
      setMessages(prev => [...prev, {
        id: `msg-error-${Date.now()}`,
        content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        role: 'system',
        timestamp: new Date()
      }]);
    } finally {
      setIsLoading(false);
      setIsStreaming(false);
    }
  };

   const generateAIResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || input.includes('hello') || input.includes('hi')) {
      return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Zenith Comp AI Assistant üéâ\n\n‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î\n‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•„Ç∏‡∏µ\n‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÜ\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üòä';
    }
    
    if (input.includes('zenith') || input.includes('‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó')) {
      return 'Zenith Comp ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô AI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå üöÄ\n\n**‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå:** "Reaching the Peak of Innovation"\n**‡∏û‡∏±‡∏ô‡∏ò‡∏Å‡∏¥‡∏à:** ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô AI ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≥‡∏™‡∏°‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà\n\n‡πÄ‡∏£‡∏≤‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á AI ‡∏Ñ‡∏£‡∏±‡∏ö! ‚ú®';
    }
    
    if (input.includes('‡∏ä‡πà‡∏ß‡∏¢') || input.includes('help') || input.includes('‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ')) {
      return '‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö! üí™\n\n**üîß ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°**\n‚Ä¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏°‡∏¥‡πà‡∏á\n‚Ä¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ best practices\n\n**üí° ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ**\n‚Ä¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà ‡πÜ\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å\n‚Ä¢ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô learning path\n\n**üéØ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ**\n‚Ä¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°\n‚Ä¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! üòÑ';
    }
    
    if (input.includes('react') || input.includes('javascript') || input.includes('typescript')) {
      return 'üöÄ **React/JavaScript/TypeScript Development**\n\n‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢! ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö\n\n**React:**\n‚Ä¢ Component-based architecture\n‚Ä¢ Hooks ‡πÅ‡∏•‡∏∞ State Management\n‚Ä¢ Performance optimization\n‚Ä¢ Modern patterns\n\n**TypeScript:**\n‚Ä¢ Type safety ‡πÅ‡∏•‡∏∞ better DX\n‚Ä¢ Interface ‡πÅ‡∏•‡∏∞ Generic types\n‚Ä¢ Advanced type manipulation\n\n**‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?** ‡πÄ‡∏ä‡πà‡∏ô:\n‚Ä¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î?\n‚Ä¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÜ?\n‚Ä¢ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà?\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! üíª‚ú®';
    }
    
    if (input.includes('‡∏ß‡∏¥‡∏õ') || input.includes('vip') || input.includes('phatra')) {
      return 'üë®‚Äçüíª **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏õ (Phatra Wongsapsakul)**\n\n‡∏ß‡∏¥‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ICT ‡∏õ‡∏µ 3 ‚Üí 4 ‡∏à‡∏≤‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏• ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤! üéì\n\n**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å:**\n‚Ä¢ Frontend Development (React, TypeScript)\n‚Ä¢ Full-stack Development\n‚Ä¢ UI/UX Design\n‚Ä¢ Modern Web Technologies\n\n**‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à:**\n‚Ä¢ VipStore - E-commerce Platform\n‚Ä¢ Personal Portfolio Website\n‚Ä¢ ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ ChatBot ‡∏ô‡∏µ‡πâ!\n\n        ‡πÄ‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ù‡πà‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! üåü';
    }
    
    if (input.includes('python') || input.includes('ai') || input.includes('machine learning')) {
      return 'ü§ñ **AI & Python Development**\n\n‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!\n\n**Python for AI:**\n‚Ä¢ TensorFlow, PyTorch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Machine Learning\n‚Ä¢ Pandas, NumPy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Data Science\n‚Ä¢ FastAPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Backend Development\n‚Ä¢ LangChain ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI Applications\n\n**AI Technologies:**\n‚Ä¢ Large Language Models (LLMs)\n‚Ä¢ Computer Vision\n‚Ä¢ Natural Language Processing\n‚Ä¢ Generative AI\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üöÄ';
    }
    
    // Default responses
    const responses = [
      '‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! ü§î ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡∏ö! üòä ‡∏ú‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏î ‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!',
      '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üåü ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤\n\n‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏°‡∏≤‡∏î‡∏π‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üí° ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å\n\n‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!'
    ];
    
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('th-TH', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const renderMessage = (message: Message) => {
    const isUser = message.role === 'user';
    const isSystem = message.role === 'system';

    if (isSystem) {
      return (
        <div key={message.id} className="flex justify-center my-4">
          <div className="bg-red-50 text-red-700 px-4 py-2 rounded-full text-sm max-w-md text-center">
            {message.content}
          </div>
        </div>
      );
    }

    return (
      <div key={message.id} className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6`}>
        <div className={`flex gap-3 max-w-4xl ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>
          {/* Avatar */}
          <div className="flex-shrink-0">
            {isUser ? (
              <div className="w-8 h-8 bg-gradient-to-br from-zenith-orange-400 to-zenith-orange-600 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-semibold">V</span>
              </div>
            ) : (
              <div className="w-8 h-8 bg-gradient-to-br from-zenith-navy-400 to-zenith-navy-600 rounded-full flex items-center justify-center">
                <img
                  src="/assets/images/ZenithComp.png"
                  alt="AI"
                  className="w-5 h-5 object-contain"
                />
              </div>
            )}
          </div>

          {/* Message Content */}
          <div className="flex flex-col">
            <div className={`
              px-4 py-3 rounded-2xl max-w-xl lg:max-w-2xl
              ${isUser 
                ? 'bg-zenith-navy-500 text-white rounded-br-md' 
                : 'bg-white border border-gray-200 text-gray-900 rounded-bl-md'
              }
              shadow-sm hover:shadow-md transition-shadow duration-200
            `}>
              <div className="whitespace-pre-wrap leading-relaxed">
                {message.content}
              </div>
              {message.isStreaming && (
                <div className="flex items-center gap-1 mt-2">
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '200ms' }}></div>
                  <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '400ms' }}></div>
                </div>
              )}
            </div>
            <div className={`text-xs text-gray-500 mt-1 ${isUser ? 'text-right' : 'text-left'}`}>
              {formatTime(message.timestamp)}
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className={`flex flex-col h-full bg-gray-50 ${className}`}>
      {/* Chat Messages Area */}
      <div className="flex-1 overflow-y-auto">
        {messages.length === 0 && !isLoading ? (
          // Welcome Screen
          <div className="h-full flex items-center justify-center p-8">
            <div className="text-center max-w-2xl">
              {/* Logo */}
              <div className="flex items-center justify-center mb-4">
                <img
                  src="/assets/images/ZenithComp.png"
                  alt="Zenith Comp Logo"
                  className="object-contain transition-transform hover:scale-110"
                  style={{ width: '100px', height: '80px' }}
                />
              </div>

              {/* Welcome Message */}
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Zenith Comp AI
              </h1>
              <p className="text-gray-600 mb-8 text-lg">
                ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
              </p>

              {/* Quick Actions */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                <button
                  onClick={() => setInputValue('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')}
                  className="p-4 bg-white rounded-xl border-2 border-gray-200 hover:border-zenith-navy-300 hover:shadow-md transition-all duration-200 text-left"
                >
                  <div className="text-zenith-navy-600 font-semibold mb-2">üëã ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß</div>
                  <div className="text-gray-600 text-sm">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö AI</div>
                </button>

                <button
                  onClick={() => setInputValue('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î React Component ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö')}
                  className="p-4 bg-white rounded-xl border-2 border-gray-200 hover:border-zenith-navy-300 hover:shadow-md transition-all duration-200 text-left"
                >
                  <div className="text-zenith-navy-600 font-semibold mb-2">üíª ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î</div>
                  <div className="text-gray-600 text-sm">‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°</div>
                </button>

                <button
                  onClick={() => setInputValue('‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á AI ‡πÅ‡∏•‡∏∞ Machine Learning ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢')}
                  className="p-4 bg-white rounded-xl border-2 border-gray-200 hover:border-zenith-navy-300 hover:shadow-md transition-all duration-200 text-left"
                >
                  <div className="text-zenith-navy-600 font-semibold mb-2">ü§ñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á AI</div>
                  <div className="text-gray-600 text-sm">‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ</div>
                </button>

                <button
                  onClick={() => setInputValue('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ learning path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Full-stack Developer')}
                  className="p-4 bg-white rounded-xl border-2 border-gray-200 hover:border-zenith-navy-300 hover:shadow-md transition-all duration-200 text-left"
                >
                  <div className="text-zenith-navy-600 font-semibold mb-2">üéØ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó Zenith Comp</div>
                  <div className="text-gray-600 text-sm">‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó Zenith Comp</div>
                </button>
              </div>

              <p className="text-gray-500 text-sm">
                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
              </p>
            </div>
          </div>
        ) : (
          // Messages List
          <div className="p-4 max-w-6xl mx-auto">
            {isLoading && messages.length === 0 && (
              <div className="flex justify-center py-8">
                <div className="flex items-center gap-2 text-gray-600">
                  <div className="animate-spin rounded-full h-6 w-6 border-2 border-zenith-navy-500 border-t-transparent"></div>
                  <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...</span>
                </div>
              </div>
            )}
            
            {messages.map(renderMessage)}
            
            {isStreaming && (
              <div className="flex justify-start mb-6">
                <div className="flex gap-3 max-w-4xl">
                  <div className="w-8 h-8 bg-gradient-to-br from-zenith-navy-400 to-zenith-navy-600 rounded-full flex items-center justify-center">
                    <img
                      src="/assets/images/ZenithComp.png"
                      alt="AI"
                      className="w-5 h-5 object-contain"
                    />
                  </div>
                  <div className="bg-white border border-gray-200 rounded-2xl rounded-bl-md px-4 py-3 shadow-sm">
                    <div className="flex items-center gap-1">
                      <span className="text-gray-600 text-sm mr-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...</span>
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-zenith-navy-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                        <div className="w-2 h-2 bg-zenith-navy-400 rounded-full animate-bounce" style={{ animationDelay: '200ms' }}></div>
                        <div className="w-2 h-2 bg-zenith-navy-400 rounded-full animate-bounce" style={{ animationDelay: '400ms' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="bg-white border-t border-gray-200 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-end gap-3">
            {/* File Upload Button */}
            <button className="flex-shrink-0 p-3 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-xl transition-colors">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
              </svg>
            </button>

            {/* Text Input */}
            <div className="flex-1 relative">
              <textarea
                ref={textareaRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                rows={1}
                disabled={isLoading}
                className="
                  w-full px-4 py-3 pr-12 bg-gray-50 border-2 border-gray-200
                  rounded-2xl focus:outline-none focus:ring-2 focus:ring-zenith-navy-500 
                  focus:border-transparent transition-all duration-200
                  resize-none max-h-32 min-h-[52px]
                  disabled:opacity-50 disabled:cursor-not-allowed
                "
                style={{ 
                  lineHeight: '1.5'
                }}
              />

              {/* Emoji Button */}
              <button className="absolute right-3 bottom-3 p-1 text-gray-400 hover:text-gray-600 transition-colors">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-.464 5.535a1 1 0 10-1.415-1.414 3 3 0 01-4.242 0 1 1 0 00-1.415 1.414 5 5 0 007.072 0z" clipRule="evenodd" />
                </svg>
              </button>
            </div>

            {/* Send Button */}
            <button
              onClick={sendMessage}
              disabled={!inputValue.trim() || isLoading}
              className="
                flex-shrink-0 p-3 bg-zenith-navy-500 text-white rounded-2xl
                hover:bg-zenith-navy-600 disabled:opacity-50 disabled:cursor-not-allowed
                transition-all duration-200 hover:shadow-lg hover:-translate-y-0.5
                disabled:hover:transform-none disabled:hover:shadow-none
              "
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              )}
            </button>
          </div>

          {/* Help Text */}
          <div className="flex items-center justify-between mt-2 px-1">
            <div className="text-xs text-gray-500">
              ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á ‚Ä¢ Shift + Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
            </div>
            {inputValue.length > 1800 && (
              <div className="text-xs text-orange-500">
                {2000 - inputValue.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};