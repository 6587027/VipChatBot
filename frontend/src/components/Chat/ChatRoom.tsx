// components/Chat/ChatRoom.tsx
import React, { useState, useEffect } from 'react';
// ‚úÖ ‡πÉ‡∏ä‡πâ alias ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á naming conflict
import * as ChatTypes from '../../types/chat';
import { ChatHeader } from './ChatHeader';
import { MessageList } from './MessageList';
import { MessageInput } from './MessageInput';

interface ChatRoomProps {
  room?: ChatTypes.ChatRoom;
  currentUser?: ChatTypes.User;
  className?: string;
}

// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ component ‡πÄ‡∏õ‡πá‡∏ô ChatRoomComponent ‡πÅ‡∏•‡πâ‡∏ß export ‡πÄ‡∏õ‡πá‡∏ô ChatRoom
export const ChatRoom: React.FC<ChatRoomProps> = ({
  room,
  currentUser,
  className = ''
}) => {
  // State Management
  const [messages, setMessages] = useState<Message[]>([]);
  const [typingUsers, setTypingUsers] = useState<TypingUser[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isConnected, setIsConnected] = useState(false);

  // Mock current user if not provided
  const mockCurrentUser: User = currentUser || {
    id: 'user-1',
    username: '‡∏ß‡∏¥‡∏õ',
    email: 'vip@mahidol.ac.th',
    avatar: '/assets/icons/vip-avatar.png',
    isOnline: true
  };

  // Mock chat room if not provided
  const mockRoom: ChatTypes.ChatRoom = room || {
    id: 'room-1',
    name: 'VipChatBot Assistant',
    description: 'AI-powered chat assistant for Mahidol University students',
    avatar: '/assets/icons/chatbot-avatar.png',
    members: [
      mockCurrentUser,
      {
        id: 'bot-1',
        username: 'ChatBot Assistant',
        email: 'bot@vipchatbot.com',
        avatar: '/assets/icons/bot-avatar.png',
        isOnline: true
      }
    ],
    unreadCount: 0,
    isPrivate: false,
    createdAt: new Date()
  };

  // Mock initial messages
  useEffect(() => {
    const mockMessages: ChatTypes.Message[] = [
      {
        id: 'msg-1',
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏õ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà VipChatBot ‡∏Ñ‡∏£‡∏±‡∏ö üëã',
        sender: {
          id: 'bot-1',
          username: 'ChatBot Assistant',
          email: 'bot@vipchatbot.com',
          avatar: '/assets/icons/bot-avatar.png',
          isOnline: true
        },
        timestamp: new Date(Date.now() - 5 * 60 * 1000),
        type: 'text'
      },
      {
        id: 'msg-2',
        content: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö',
        sender: mockCurrentUser,
        timestamp: new Date(Date.now() - 4 * 60 * 1000),
        type: 'text'
      },
      {
        id: 'msg-3',
        content: '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:\n\nüî∑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\nüî∑ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå\nüî∑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà ‡πÜ\nüî∑ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î\nüî∑ ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏≠‡∏µ‡∏Å‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢!\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üòä',
        sender: {
          id: 'bot-1',
          username: 'ChatBot Assistant',
          email: 'bot@vipchatbot.com',
          avatar: '/assets/icons/bot-avatar.png',
          isOnline: true
        },
        timestamp: new Date(Date.now() - 3 * 60 * 1000),
        type: 'text'
      }
    ];

    setMessages(mockMessages);
    setIsConnected(true);
  }, [mockCurrentUser]);

  // Handle sending messages
  const handleSendMessage = (content: string) => {
    if (!content.trim()) return;

    // Create user message
    const userMessage: ChatTypes.Message = {
      id: `msg-${Date.now()}`,
      content: content.trim(),
      sender: mockCurrentUser,
      timestamp: new Date(),
      type: 'text'
    };

    // Add user message to list
    setMessages(prev => [...prev, userMessage]);

    // Simulate bot typing
    setTypingUsers([{
      userId: 'bot-1',
      username: 'ChatBot Assistant',
      timestamp: new Date()
    }]);

    // Simulate bot response after delay
    setTimeout(() => {
      const botResponse: ChatTypes.Message = {
        id: `msg-bot-${Date.now()}`,
        content: generateBotResponse(content),
        sender: {
          id: 'bot-1',
          username: 'ChatBot Assistant',
          email: 'bot@vipchatbot.com',
          avatar: '/assets/icons/bot-avatar.png',
          isOnline: true
        },
        timestamp: new Date(),
        type: 'text'
      };

      setMessages(prev => [...prev, botResponse]);
      setTypingUsers([]);
    }, 1500 + Math.random() * 1000);
  };

  // Simple bot response generator
  const generateBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || message.includes('hello') || message.includes('hi')) {
      return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?';
    }
    
    if (message.includes('‡∏ä‡∏∑‡πà‡∏≠') || message.includes('name')) {
      return '‡∏ú‡∏°‡∏ä‡∏∑‡πà‡∏≠ ChatBot Assistant ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏ß‡∏¥‡∏õ ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ICT ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•! ü§ñ‚ú®';
    }
    
    if (message.includes('‡∏ä‡πà‡∏ß‡∏¢') || message.includes('help')) {
      return '‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö:\n\nüî∑ ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°\nüî∑ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà ‡πÜ\nüî∑ ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å code\nüî∑ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ\nüî∑ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ learning path\n\n‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! üòÑ';
    }
    
    if (message.includes('‡πÄ‡∏ß‡∏•‡∏≤') || message.includes('time')) {
      return `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${new Date().toLocaleTimeString('th-TH', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      })} ‡∏Ñ‡∏£‡∏±‡∏ö ‚è∞`;
    }
    
    if (message.includes('‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ') || message.includes('today')) {
      return `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô${new Date().toLocaleDateString('th-TH', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })} ‡∏Ñ‡∏£‡∏±‡∏ö üìÖ`;
    }
    
    if (message.includes('react') || message.includes('javascript') || message.includes('typescript')) {
      return '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á React/JavaScript/TypeScript ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°? üöÄ\n\n‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:\n‚Ä¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î React Hooks\n‚Ä¢ ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å JavaScript code\n‚Ä¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ TypeScript best practices\n‚Ä¢ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö component architecture\n\n‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? üíª';
    }
    
    if (message.includes('mahidol') || message.includes('‡∏°‡∏´‡∏¥‡∏î‡∏•')) {
      return '‡πÇ‡∏≠‡πâ! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏°‡∏´‡∏¥‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö? üéì\n\n‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ß‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏°‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ICT ‡∏°‡∏´‡∏¥‡∏î‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô\n\n‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö? üòä';
    }
    
    if (message.includes('vip') || message.includes('‡∏ß‡∏¥‡∏õ')) {
      return '‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ß‡∏¥‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö? üòÑ\n\n‡∏ß‡∏¥‡∏õ (‡∏†‡∏±‡∏ó‡∏£ ‡∏ß‡∏á‡∏®‡πå‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏Å‡∏∏‡∏•) ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ICT ‡∏õ‡∏µ 3 ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏¥‡∏î‡∏• ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤! ‡πÄ‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡πâ‡∏≤‡∏ô Frontend Development ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Full-stack Development ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö üë®‚Äçüíª‚ú®';
    }

    // Default responses
    const defaultResponses = [
      '‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?',
      '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ü§ñ',
      '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üí°',
      '‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ ‡∏ö‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î üòä',
      '‡∏ß‡πâ‡∏≤‡∏ß! ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏à‡∏±‡∏á ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°? üåü'
    ];
    
    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };

  // Handle typing events
  const handleTypingStart = () => {
    console.log('User started typing');
  };

  const handleTypingStop = () => {
    console.log('User stopped typing');
  };

  // Handle other actions
  const handleSettingsClick = () => {
    console.log('Settings clicked');
  };

  const handleSearchClick = () => {
    console.log('Search clicked');
  };

  const handleVideoCallClick = () => {
    console.log('Video call clicked');
  };

  const handleVoiceCallClick = () => {
    console.log('Voice call clicked');
  };

  const handleMessageClick = (message: ChatTypes.Message) => {
    console.log('Message clicked:', message);
  };

  const handleLoadMore = () => {
    console.log('Load more messages');
    setIsLoading(true);
    setTimeout(() => {
      setIsLoading(false);
    }, 1000);
  };

  return (
    <div className={`flex flex-col h-full bg-gray-50 ${className}`}>
      {/* Chat Header */}
      <ChatHeader
        room={mockRoom}
        currentUser={mockCurrentUser}
        onSettingsClick={handleSettingsClick}
        onSearchClick={handleSearchClick}
        onVideoCallClick={handleVideoCallClick}
        onVoiceCallClick={handleVoiceCallClick}
      />

      {/* Messages Area */}
      <MessageList
        messages={messages}
        currentUserId={mockCurrentUser.id}
        typingUsers={typingUsers}
        isLoading={isLoading}
        hasMoreMessages={messages.length > 3}
        onLoadMore={handleLoadMore}
        onMessageClick={handleMessageClick}
        className="flex-1"
      />

      {/* Message Input */}
      <MessageInput
        onSendMessage={handleSendMessage}
        onTypingStart={handleTypingStart}
        onTypingStop={handleTypingStop}
        disabled={!isConnected}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á ChatBot Assistant..."
        maxLength={2000}
      />

      {/* Connection Status */}
      {!isConnected && (
        <div className="bg-yellow-50 border-t border-yellow-200 px-4 py-2 text-center">
          <p className="text-yellow-800 text-sm flex items-center justify-center gap-2">
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-yellow-600 border-t-transparent" />
            üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...
          </p>
        </div>
      )}
    </div>
  );
};